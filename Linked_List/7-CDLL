class Node:
    def __init__(self, item, prev=None, next=None):
        self.item = item
        self.prev = prev
        self.next = next

class CDLL:
    def __init__(self, start=None):
        self.start = start

    def is_empty(self):
        return self.start is None

    def insert_at_start(self, data):
        n = Node(data)
        if self.is_empty():
            n.next = n
            n.prev = n
        else:
            n.next = self.start
            n.prev = self.start.prev
            self.start.prev.next = n
            self.start.prev = n
        self.start = n

    def insert_at_last(self, data):
        n = Node(data)
        if self.is_empty():
            n.next = n
            n.prev = n
            self.start = n
        else:
            n.next = self.start
            n.prev = self.start.prev
            self.start.prev.next = n
            self.start.prev = n

    def search(self, data):
        temp = self.start
        if temp is None:
            return None
        while True:
            if temp.item == data:
                return temp
            temp = temp.next
            if temp == self.start:
                break
        return None

    def insert_after(self, temp, data):
        if temp is not None:
            n = Node(data)
            n.next = temp.next
            n.prev = temp
            temp.next.prev = n
            temp.next = n

    def print_list(self):
        temp = self.start
        if temp is not None:
            print(temp.item, end=' ')
            temp = temp.next
            while temp != self.start:
                print(temp.item, end=' ')
                temp = temp.next
            print()

    def delete_first(self):
        if self.start is not None:
            if self.start.next == self.start:  # Single node
                self.start = None
            else:
                self.start.prev.next = self.start.next
                self.start.next.prev = self.start.prev
                self.start = self.start.next

    def delete_last(self):
        if self.start is not None:
            if self.start.next == self.start:  # Single node
                self.start = None
            else:
                self.start.prev.prev.next = self.start
                self.start.prev = self.start.prev.prev

    def delete_item(self, data):
        if self.start is not None:
            temp = self.start
            while True:
                if temp.item == data:
                    if temp == self.start:  # If it's the first node
                        self.delete_first()
                        return
                    temp.prev.next = temp.next
                    temp.next.prev = temp.prev
                    return
                temp = temp.next
                if temp == self.start:
                    break

    def __iter__(self):
        return CDLLIterator(self.start)

class CDLLIterator:
    def __init__(self, start):
        self.current = start
        self.start = start
        self.count = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.current is None or (self.current == self.start and self.count == 1):
            raise StopIteration
        self.count = 1
        data = self.current.item
        self.current = self.current.next
        return data

mylist = CDLL()
mylist.insert_at_last(30)
mylist.insert_at_start(10)
mylist.insert_at_start(5)
mylist.insert_at_last(35)
mylist.insert_after(mylist.search(10), 20)
mylist.delete_first()
mylist.delete_item(30)
mylist.print_list()

for i in mylist:
    print(i, end=' ')
print()




Output:
10 20 35 
10 20 35 
