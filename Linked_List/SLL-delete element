class Node:
    def __init__(self,data):
        self.data=data
        self.ref=None

class LL:
    def __init__(self):
        self.head=None

    def Print_LL(self):
        if self.head is None:
            print("Linked List is Empty")
        else:
            n=self.head
            while n is not None:
                print(n.data,"--->",end=" ")
                n=n.ref
                
    def add_begin(self,data):
        new_node=Node(data)
        new_node.ref=self.head
        self.head=new_node
                
    def delete_begin(self):
        if self.head is None:
            print("LL is Empty so we can't delete nodes!")
        else:
            self.head=self.head.ref
            
    def delete_end(self):
        if self.head is None:
            print("LL is Empty so we can't delete nodes!")
        elif self.head.ref is None:
            self.head=None
        else:
            n=self.head
            while n.ref.ref is not None:
                n=n.ref
            n.ref=None
            
    def delete_by_value(self,x):
        if self.head is None:
            print("Can't delete LL is Empty")
        if x==self.head.data:
            self.head=self.head.ref
            return
        n=self.head
        while n.ref is not None:
            if x==n.ref.data:
                break
            n=n.ref
        if n.ref is None:
            print("Node is Not Present")
        else:
            n.ref=n.ref.ref


LL1=LL()
LL1.add_begin(10)
LL1.add_begin(20)
LL1.add_begin(30)
LL1.add_begin(40)
LL1.add_begin(50)
LL1.Print_LL()
print()
LL1.delete_begin()
LL1.Print_LL()
print()
LL1.delete_end()
LL1.Print_LL()
print()
LL1.delete_by_value(20)
LL1.Print_LL()



Output:
50 ---> 40 ---> 30 ---> 20 ---> 10 ---> 
40 ---> 30 ---> 20 ---> 10 --->
40 ---> 30 ---> 20 --->
40 ---> 30 --->
