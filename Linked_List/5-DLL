class Node:
    def __init__(self,prev=None,item=None,next=None):
        self.prev=prev
        self.item=item
        self.next=next

class DLL:
    def __init__(self,start=None):
        self.start=start
    def is_empty(self):
        return self.start==None

    def print_list(self):
        temp=self.start
        while temp is not None:
            print(temp.item,end=' ')
            temp=temp.next

    def insert_at_start(self,data):
        n=Node(None,data,self.start)
        if not self.is_empty():
            self.start.prev=n
        self.start=n

    def insert_at_last(self,data):
        temp=self.start
        if self.start!=None:
            while temp.next!=None:
                temp=temp.next
        n=Node(temp,data,None)
        if temp==None:
            self.start=n
        else:
            temp.next=n

    def insert_after(self,temp,data):
        if temp is not None:
            n=Node(temp,data,temp.next)
            if temp.next is not None:
                temp.next.prev=n
            temp.next=n

    def insert_before(self, temp, data):
        if temp is not None:
            n = Node(temp.prev, data, temp)
            if temp.prev is not None:
                temp.prev.next = n
            else:
                self.start = n
            temp.prev = n

    def search(self,data):
        temp=self.start
        while temp is not None:
            if temp.item==data:
                return temp
            temp=temp.next
        return None

    def delete_first(self):
        if self.start is not None:
            self.start=self.start.next
            if self.start is not None:
                self.start.prev=None

    def delete_last(self):
        if self.start is None:
            pass
        elif self.start.next is None:
            self.start=None
        else:
            temp=self.start
            while temp.next is not None:
                    temp=temp.next
            temp.prev.next=None

    def delete_item(self, data):
        if self.start is None:
            return
        temp = self.start
        while temp is not None:
            if temp.item == data:
                # If not the last node
                if temp.next is not None:
                    temp.next.prev = temp.prev
    
                # If not the first node
                if temp.prev is not None:
                    temp.prev.next = temp.next
                else:
                    # Deleting the first node, update start
                    self.start = temp.next
                return  # Item found and deleted, exit function
            temp = temp.next

    def reverse(self):
        if self.start is None:
            return
        temp = None
        current = self.start
        while current is not None:
            # Swap next and prev for each node
            temp = current.prev
            current.prev = current.next
            current.next = temp
            # Move to the next node (which is previous before swapping)
            current = current.prev
        if temp is not None:
            self.start = temp.prev

    def __iter__(self):
        return DLLIterator(self.start)

class DLLIterator:
    def __init__(self,start):
        self.current=start
    def __iter__(self):
        return self
    def __next__(self):
        if not self.current:
            raise StopIteration
        data=self.current.item
        self.current=self.current.next
        return data
                    

mylist = DLL()
mylist.insert_at_start(20)         # List: 20
mylist.insert_at_start(10)         # List: 10 20
mylist.insert_at_last(40)          # List: 10 20 40
mylist.insert_after(mylist.search(20), 30)  # List: 10 20 30 40
mylist.print_list()                # Output: 10 20 30 40
print()

mylist.reverse()                   # Reversed List: 40 30 20 10
print()

mylist.delete_item(30)             # List after deleting 30: 40 20 10
mylist.print_list()                # Output: 40 20 10
print()

for i in mylist:                   # Output via iteration: 40 20 10
    print(i, end=' ')

print("\nInsert before 20:")
mylist.insert_before(mylist.search(20), 15)  # Insert 15 before 20 → 40 15 20 10
mylist.print_list()

print("\nDelete first:")
mylist.delete_first()  # Removes 40 → 15 20 10
mylist.print_list()

print("\nDelete last:")
mylist.delete_last()  # Removes 10 → 15 20
mylist.print_list()

print("\nSearch 15:")
found = mylist.search(15)
if found:
    print("Found:", found.item)
else:
    print("Not found")





Output:
10 20 30 40

40 20 10
40 20 10
Insert before 20:
40 15 20 10
Delete first:
15 20 10
Delete last:
15 20
Search 15:
Found: 15
