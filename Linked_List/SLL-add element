##List##
It is a linear collection of data items also known as List Item

Ex-List of Marks-->30,40,53,54
Ex-List of city names-->"Jaipur","Goa"
Ex-List of Employees-->100,"Atul",25000

What is Node?
SLL
Operations
insertion at start()-------->#No Traversing
insertion at end()---------->#Traversing
deletion at start()--------->#No Traversing
deletion at end()----------->#Traversing
is_empty()
traverse()



class Node:
    def __init__(self,data):
        self.data=data
        self.ref=None

class LL:
    def __init__(self):
        self.head=None

    def Print_LL(self):
        if self.head is None:
            print("Linked List is Empty")
        else:
            n=self.head
            while n is not None:
                print(n.data,"--->",end=" ")
                n=n.ref

    def add_begin(self,data):
        new_node=Node(data)
        new_node.ref=self.head
        self.head=new_node

    def add_end(self,data):
        new_node=Node(data)
        if self.head is None:
            self.head=new_node
        else:
            n=self.head
            while n.ref is not None:
                n=n.ref
            n.ref=new_node

    def add_after(self,data,x):
        n=self.head
        while n is not None:
            if x==n.data:
                break
            n=n.ref
        if n is None:
            print("Node is Not present in LL")
        else:
            new_node=Node(data)
            new_node.ref=n.ref
            n.ref=new_node

    def add_before(self,data,x):
        if self.head is None:
            print("Linked Lise is empty")
            return
        if self.head.data==x:
            new_node=Node(data)
            new_node.ref=self.head
            self.head=new_node
            return
        n=self.head
        while n.ref is not None:
            if n.ref.data==x:
                break
            n=n.ref
        if n.ref is None:
            print("Node is not found")
        else:
            new_node=Node(data)
            new_node.ref=n.ref
            n.ref=new_node

    def insert_empty(self,data):
        if self.head is None:
            new_node=Node(data)
            self.head=new_node
        else:
            print("Linked List is not Empty")

LL1=LL()
LL1.add_begin(10)
LL1.add_end(100)
LL1.add_begin(20)
LL1.add_after(200,100)
LL1.add_before(50,100)
LL1.insert_empty(70)
LL1.Print_LL()



Output:
Linked List is not Empty
20 ---> 10 ---> 50 ---> 100 ---> 200 --->
