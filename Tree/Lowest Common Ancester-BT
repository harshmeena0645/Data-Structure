LCA (Lowest Common Ancester)

Sample Input 0
7
3 5 1 6 2 0 8 null null 7 4
5 4
Sample Output 0
5

Sample Input 1
7
1 2 3 4 5 6 7
4 5
Sample Output 1
2


Code-1:
class Node:
    def __init__(self, item=None, left=None, right=None):
        self.item = item
        self.left = left
        self.right = right

class BinaryTree:
    def __init__(self):
        self.root = None
    
    def insertElements(self, elements):
        if not elements:
            return None
        self.root = Node(elements[0])
        queue = [self.root]  

        i = 1  
        while i < len(elements):  
            curr = queue.pop(0)  

            if i < len(elements) and elements[i] is not None:  
                curr.left = Node(elements[i])  
                queue.append(curr.left)  
            i += 1  

            if i < len(elements) and elements[i] is not None:  
                curr.right = Node(elements[i])  
                queue.append(curr.right)  
            i += 1  

    def findLCA(self, root, p, q):
        if root is None:
            return None
        if root.item == p or root.item == q:
            return root

        left_lca = self.findLCA(root.left, p, q)
        right_lca = self.findLCA(root.right, p, q)

        if left_lca and right_lca:
            return root

        return left_lca if left_lca else right_lca

    def common(self, p, q):
        lca = self.findLCA(self.root, p, q)
        return lca.item if lca else None
        
        
n = int(input())
values = input().split()
int_values = [int(val) if val != "null" else None for val in values]
p, q = map(int, input().split())

bt = BinaryTree()
bt.insertElements(int_values)
print(bt.common(p,q))
