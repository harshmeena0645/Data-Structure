Height of Tree-BT
//1 based indexing

Sample Input 0
7
3 9 20 null null 15 7
Sample Output 0
3
Explanation 0
  3

 / \

 9 20

   / \

  15  7
The maximum depth of this binary tree is 3 because the longest path from the root 3 to the farthest leaf nodes (15 or 7) contains 3 nodes.

Sample Input 1
7
1 2 3 null null 4 5
Sample Output 1
3

Code-1:
def tree_height(values):
    values = [v for v in values if v != "null"]
    l = len(values)
    if l == 0:
        return 0
    if l == 1:
        return 1
    i = 1
    while (2**i - 1) < l:
        i += 1
    return i

n = int(input())  
values = input().split()  
print(tree_height(values))


Code-2:
class Node:
    def __init__(self, item=None, left=None, right=None):
        self.item = item
        self.left = left
        self.right = right

class BinaryTree:
    def __init__(self):
        self.root = None

    def insertLevelOrder(self, values):
        if not values or values[0] == "null":
            return None
        
        self.root = Node(int(values[0]))
        queue = [self.root]
        i = 1

        while i < len(values):
            current = queue.pop(0)

            if i < len(values) and values[i] != "null":
                current.left = Node(int(values[i]))
                queue.append(current.left)
            i += 1

            if i < len(values) and values[i] != "null":
                current.right = Node(int(values[i]))
                queue.append(current.right)
            i += 1

    def height(self):
        return self._height(self.root)

    def _height(self, node):
        if node is None:
            return 0
        left_height = self._height(node.left)
        right_height = self._height(node.right)
        return max(left_height, right_height) + 1

n = int(input())
values = input().split()
tree = BinaryTree()
tree.insertLevelOrder(values)
print(tree.height())
