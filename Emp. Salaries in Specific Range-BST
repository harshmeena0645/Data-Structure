Binary Search Tree - Summing Employee Salaries within a Specific Range

Sample Input 0
6
50000 40000 60000 30000 45000 55000
40000 60000
Sample Output 0
250000
Explanation 0
              50000
            /        \
          40000    60000
        /      \    /
       30000 45000 55000
The sum of the employee salaries between 40000 and 60000 is 40000+45000+50000+55000+60000= 250000

Sample Input 1
5
70000 60000 80000 50000 75000
60000 75000
Sample Output 1
205000


Code-1:
n=int(input())
l=list(map(int,input().split()))
s,e=map(int,input().split())
sum=0
for i in l:
    if s<=i<=e:
        sum+=i
print(sum)


Code-2:
class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

def insert(root, key):
    if root is None:
        return Node(key)
    if key < root.key:
        root.left = insert(root.left, key)
    else:
        root.right = insert(root.right, key)
    return root

def range_sum_bst(root, low, high):
    if root is None:
        return 0
    if low <= root.key <= high:
        return root.key + range_sum_bst(root.left, low, high) + range_sum_bst(root.right, low, high)
    elif root.key < low:
        return range_sum_bst(root.right, low, high)
    else:
        return range_sum_bst(root.left, low, high)
    
n = int(input())
salaries = list(map(int, input().split()))
salary1, salary2 = map(int, input().split())
root = None
for salary in salaries:
    root = insert(root, salary)
print(range_sum_bst(root, salary1, salary2))
